---
layout: post
title:  "CORS"
date:   2022-07-09 15:35:00 +0900
categories: Infra
---

CORS 설정 때문에 Trouble shooting 하다가 애를 많이 먹은 적이 있어서 한번 정리해보고자 합니다.🙂

# CORS 정책

###  Same-origin-Policy
: 동일 출처 정책(same-origin-policy)는 웹 보안 정책 중 하나로 출처(origin)에서 불러온 문서나 스크립트가 다른 출처(origin)에서 가져온 리소스와 상호 작용하는 것을 제한하는 정책입니다. 다시 정의하자면, 같은 출처에서만 리소스를 공유할 수 있다는 규칙을 가진 정책입니다.
    
1. 출처
: 동일한 출처(origin)란 두 페이지의 Protocol, Host, Port가 같은 것을 의미합니다. 예를 들어 origin을 [http://samedomain.com/dir/page.html](http://samedomain.com/dir/page.html)이라고 가정하였을 때, 아래와 같이 URL을 요청할 경우 해당 결과를 보여줍니다.
    
![Origin](/img/origin.png)
    
그러나 웹이라는 오픈스페이스 환경에서 다른 출처의 리소스를 가져와 사용하는 것은 흔한 일이기 때문에 예외 사항을 두고 출처가 다르더라도 허용합니다. 이때 등장한 것이 CORS입니다.
    
- 예외 사항
    
IE(internet Explorer)는 동일 출처 정책에 예외 상황이 존재합니다.
    
- Trust Zones: 두 도메인이 highly trusted zone에 속하면(기업 도메인 등) 동일 출처 제약이 적용되지 않는다.
- Port: IE는 포트를 비교하지 않는다. 따라서 [http://company.com:81/index.html](http://company.com:81/index.html)과 [http://company.com/indexx.html](http://company.com/indexx.html)은 동일 출처로 간주되어 제약이 적용되지 않는다.
    
이러한 예외 사항은 비표준이며 다른 브라우저에는 적용되지 않습니다.

&nbsp;
&nbsp;

### CORS(Cross-Origin-Resource-Sharing)
    
CORS는 SOP의 예외조항으로 웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 Specification입니다. 서버와 클라이언트가 정해진 헤더를 통해 서로 요청이나 응답에 반응할지 결정하는 방식으로 교차 출처 자원 공유(Cross-Origin-Resource-Sharing)라는 이름으로 표준화되었습니다.

1. CORS 요청 종류
: CORS 요청은 **Simple/Preflight, Credential/Non-Credential**의 조합으로 4가지가 존재합니다. 브라우저가 요청 내용을 분석하여 4가지 방식 중 해당하는 방식으로 서버에 요청하므로 개발자가 목적에 맞는 방식을 선택하여 그 조건에 맞게 코딩해야 합니다.

    1) Simple Request (일반적인 request)
    : 세 가지 조건을 모두 만족하면 Simple Request로 취급합니다.   
        1. GET, HEAD, POST 중의 한 가지 방식 사용
        2. POST 방식일 경우 Content-type이 셋 중 하나
            - application/x-www-form-urlencoded
            - multipart/form-data
            - text/plain (default 설정)
        3. Custom header를 전송하지 않을 것
    
    출처(Origin) 값을 request header에 포함시키고 서버 단에서 해당 Origin 이외의 호출을 허용할 것인지 response header의 Access-Control- 계열의 값을 보고 판단합니다. Simple Request는 서버에 1번 요청하고 1번 회신하는 것으로 처리가 종료됩니다.  

    2) Preflight Request
    : Simple Request 조건에 해당하지 않으면 브라우저는 Preflight Request 방식으로 요청합니다.
        1. Preflight Request
            1. GET, HEAD, POST 외의 다른 방식으로도 요청을 보낼 수 있음
            2. application/xml처럼 다른 Content-type으로 요청을 보낼 수 있음
            3. Custom header 사용 가능
        2. Preflight 동작  
            : Preflight Request는 예비 요청과 본 요청으로 나뉘어 전송됩니다. 먼저 서버에 예비 요청(Preflight Request)를 보내고 그에 대해 서버가 응답한 후 본 요청(Actual Request)를 서버에 보내고 서버도 본 요청에 응답합니다. 이때 SERVER 단에서 Access-Control- 계열의 response Header를 지정하면 OPTIONS 요청 및 실제 요청이 처리 가능합니다.  
![Prefight](/img/Untitled.png)
        
    단, 서버 단에서 OPTIONS Method를 허용하지 않는다면 405 Error로 호출이 불가합니다.
    
    3) Credential Request
    : Credential Request는 HTTP Cookies와 HTTP Authentication 정보를 인식할 수 있도록 하는 요청입니다. 기본적으로 cross-site XMLHttpRequest나 Fetch 호출에서 브라우저는 자격 증명 (Authentication)을 보내지 않습니다. 이 때문에 Host 정보만 같다면 HTTP session은 같은 단위로 처리가 되지만 XMLHttpRequest의 경우 protocol 및 port가 다를 경우 session이 유실됩니다. 이러한 session 유실을 해결하기 위해서 request를 하는 측과 Server측 모두 설정이 필요합니다.
    
        1. Request 하는 측
        : 요청 시 **xhr.withCredentials = true** 를 지정하여 Credential 요청
        
        2. 서버 측
        : **Access-Control-Allow-Credentials: true** 설정
            *서버 측에서 Access-Control-Allow-Credentials: true를 설정하면 Access-Control-Allow-Origin 헤더 값에는 * 로 지정할 수 없고 [http://adomain.com](http://adomain.com/) 과 같은 구체적인 도메인으로 지정해야 합니다.

    4) Non-Credential Request
    : 아무런 설정을 하지 않았을 경우 CORS 요청은 기본적으로 Non-Credential 요청입니다. 요청을 보내는 측에서 xhr.withCredentials = true를 설정 하지 않았다면 Non-Credential 요청입니다.

&nbsp;
&nbsp;

###  CORS Header
1. CORS Response Header 종류
    1) Access-Control-Allow-Origin
    : 단일 출처를 지정하여 브라우저가 해당 출처가 리소스에 접근하도록 허용합니다. “*”로 지정하는 경우 Origin에 상관없이 모든 리소스에 접근하도록 허용합니다.
            
    2) Access-Control-Allow-Headers   
    : 실제 요청 시 사용할 수 있는 HTTP header를 지정합니다.
            
    3) Access-Control-Allow-Methods  
    : 리소스에 접근할 때 허용되는 Method를 지정합니다. 이 header는 preflight request에 대한 응답으로 사용됩니다.
            
    4) Access-Control-Max-Age  
    : preflight request 요청 결과를 캐시할 수 있는 시간(초 단위)을 지정합니다.
            
    5) Access-Control-Allow-Credentials   
    : credentials 플래그가 true일 때, 요청에 대한 응답을 표시하기 위해 사용됩니다. 이 header를 설정하지 않을 경우 브라우저가 응답을 무시하고 웹 컨텐츠로 반환되지 않습니다.
            
    6) Access-Control-Expose-Headers   
    : 브라우저가 접근할 수 있는 헤더를 서버의 화이트 리스트에 추가할 때 사용됩니다.